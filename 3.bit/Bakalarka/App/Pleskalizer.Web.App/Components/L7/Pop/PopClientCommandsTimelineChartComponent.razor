@using IO.Swagger.Models
@using ApexCharts
@using Newtonsoft.Json
@using Color = MudBlazor.Color

@if (Data != null && ChartData.Count() > 0)
{
    <DemoContainer>
        <MudGrid Class="d-flex justify-end">
            <MudItem>
                <MudIconButton @onclick="() => chart.RenderAsync()" Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" Color="Color.Primary"/>
            </MudItem>
        </MudGrid>
        <ApexChart TItem="ChartModel"
                   @ref="chart">
            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.USEREnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="USER"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.PopClientMessage.Command == PopClientMessageDTO.CommandEnum.USEREnum))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }

            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.UIDLEnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="UIDLE"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.PopClientMessage.Command == PopClientMessageDTO.CommandEnum.UIDLEnum))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }

            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.QUITEnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="QUIT"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.PopClientMessage.Command == PopClientMessageDTO.CommandEnum.QUITEnum))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }

            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.STATEnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="STATE"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.PopClientMessage.Command == PopClientMessageDTO.CommandEnum.STATEnum))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }

            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.LISTEnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="LIST"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.PopClientMessage.Command == PopClientMessageDTO.CommandEnum.LISTEnum))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }

            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.RETREnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="RETRE"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.PopClientMessage.Command == PopClientMessageDTO.CommandEnum.RETREnum))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }

            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.DELEEnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="DELE"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.PopClientMessage.Command == PopClientMessageDTO.CommandEnum.DELEEnum))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }

            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.CAPAEnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="CAPA"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.PopClientMessage.Command == PopClientMessageDTO.CommandEnum.CAPAEnum))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }

            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.NOOPEnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="NOOPE"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.PopClientMessage.Command == PopClientMessageDTO.CommandEnum.NOOPEnum))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }
            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.RSETEnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="RSETE"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.PopClientMessage.Command == PopClientMessageDTO.CommandEnum.RSETEnum))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }

            @if (Data.Count(x => x.Command == PopClientMessageDTO.CommandEnum.NOCOMMANDEnum) > 0)
            {
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="NOCOMMAND"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count())"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }


        </ApexChart>
    </DemoContainer>
}


@code {

    [Parameter]
    public List<PopClientMessageDTO>? Data { get; set; }

    public List<ChartModel> ChartData { get; set; } = new List<ChartModel>();
    private ApexChart<ChartModel>? chart;

    protected override async Task OnParametersSetAsync()
    {
        if (Data != null)
        {
            ChartData = new List<ChartModel>();
            var oneNinth = Data.Min(x => x.Timestamp) ?? DateTime.UnixEpoch.Ticks;
            var nineNinths = Data!.Max(x => x.Timestamp) ?? DateTime.Today.Ticks;

            double range = nineNinths - oneNinth;
            var twoNinths = (oneNinth + (range * 0.125));
            var threeNinths = (oneNinth + (range * 0.250));
            var forNinths = (oneNinth + (range * 0.375));
            var fiveNinths = (oneNinth + (range * 0.5));
            var sixNinths = (oneNinth + (range * 0.625));
            var sevenNinths = (oneNinth + (range * 0.75));
            var eightNinths = (oneNinth + (range * 0.875));

            foreach (var item in Data)
            {
                if (item.Timestamp < twoNinths) ChartData.Add(new ChartModel(item, twoNinths));
                else if (item.Timestamp > twoNinths && item.Timestamp <= threeNinths) ChartData.Add(new ChartModel(item, threeNinths));
                else if (item.Timestamp > threeNinths && item.Timestamp <= forNinths) ChartData.Add(new ChartModel(item, forNinths));
                else if (item.Timestamp > forNinths && item.Timestamp <= fiveNinths) ChartData.Add(new ChartModel(item, fiveNinths));
                else if (item.Timestamp > fiveNinths && item.Timestamp <= sixNinths) ChartData.Add(new ChartModel(item, sixNinths));
                else if (item.Timestamp > sixNinths && item.Timestamp <= sevenNinths) ChartData.Add(new ChartModel(item, sevenNinths));
                else if (item.Timestamp > sevenNinths && item.Timestamp <= eightNinths) ChartData.Add(new ChartModel(item, eightNinths));
                else if (item.Timestamp > eightNinths && item.Timestamp <= nineNinths) ChartData.Add(new ChartModel(item, nineNinths));
            }

            if (chart != null)
            {
                chart.RenderAsync();
            }
            StateHasChanged();
        }
    }

    public class ChartModel
    {
        public PopClientMessageDTO PopClientMessage { get; set; }
        public double Timestamp { get; set; }

        public ChartModel(PopClientMessageDTO popClientMessage, double timestamp)
        {
            PopClientMessage = popClientMessage;
            Timestamp = timestamp;
        }
    }

}