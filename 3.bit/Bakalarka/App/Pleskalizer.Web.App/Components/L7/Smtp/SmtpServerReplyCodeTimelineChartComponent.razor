@using IO.Swagger.Models
@using ApexCharts
@using Color = MudBlazor.Color
<DemoContainer>
    <MudGrid Class="d-flex justify-end">
        <MudItem>
            <MudIconButton @onclick="() => chart.RenderAsync()" Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" Color="Color.Primary"/>
        </MudItem>
    </MudGrid>
    <ApexChart TItem="ChartModel"
               @ref="chart">
        <ApexPointSeries TItem="ChartModel"
                         Items="ChartData"
                         Name="1xx"
                         XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                         YAggregate="@(e => e.Count(e => e.SmtpServerMessage.ReplyCode < 200))"
                         OrderBy="e => e.X"
                         SeriesType="SeriesType.Bar"/>

        <ApexPointSeries TItem="ChartModel"
                         Items="ChartData"
                         Name="2xx"
                         XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                         YAggregate="@(e => e.Count(e => e.SmtpServerMessage.ReplyCode >= 200 && e.SmtpServerMessage.ReplyCode < 300))"
                         OrderBy="e => e.X"
                         SeriesType="SeriesType.Bar"/>

        <ApexPointSeries TItem="ChartModel"
                         Items="ChartData"
                         Name="3xx"
                         XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                         YAggregate="@(e => e.Count(e => e.SmtpServerMessage.ReplyCode >= 300 && e.SmtpServerMessage.ReplyCode < 400))"
                         OrderBy="e => e.X"
                         SeriesType="SeriesType.Bar"/>

        <ApexPointSeries TItem="ChartModel"
                         Items="ChartData"
                         Name="4xx"
                         XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                         YAggregate="@(e => e.Count(e => e.SmtpServerMessage.ReplyCode >= 400 && e.SmtpServerMessage.ReplyCode < 500))"
                         OrderBy="e => e.X"
                         SeriesType="SeriesType.Bar"/>

        <ApexPointSeries TItem="ChartModel"
                         Items="ChartData"
                         Name="5xx"
                         XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                         YAggregate="@(e => e.Count(e => e.SmtpServerMessage.ReplyCode >= 500 && e.SmtpServerMessage.ReplyCode < 600))"
                         OrderBy="e => e.X"
                         SeriesType="SeriesType.Bar"/>
    </ApexChart>
</DemoContainer>
<TimelineComunicationChart Data="Data.Select(x=>x.Timestamp).ToList()"/>

@code {

    [Parameter]
    public List<SmtpServerMessageDTO> Data { get; set; } = new List<SmtpServerMessageDTO>();

    public List<ChartModel> ChartData { get; set; } = new List<ChartModel>();
    private ApexChart<ChartModel> chart;

    protected override async Task OnParametersSetAsync()
    {
        ChartData = new List<ChartModel>();
        var oneNinth = Data.Min(x => x.Timestamp ?? 0);
        var nineNinths = Data!.Max(x => x.Timestamp ?? 0);

        double range = nineNinths - oneNinth;
        var twoNinths = (oneNinth + (range * 0.125));
        var threeNinths = (oneNinth + (range * 0.250));
        var forNinths = (oneNinth + (range * 0.375));
        var fiveNinths = (oneNinth + (range * 0.5));
        var sixNinths = (oneNinth + (range * 0.625));
        var sevenNinths = (oneNinth + (range * 0.75));
        var eightNinths = (oneNinth + (range * 0.875));

        foreach (var item in Data)
        {
            if (item.Timestamp < twoNinths) ChartData.Add(new ChartModel(item, twoNinths));
            else if (item.Timestamp > twoNinths && item.Timestamp <= threeNinths) ChartData.Add(new ChartModel(item, threeNinths));
            else if (item.Timestamp > threeNinths && item.Timestamp <= forNinths) ChartData.Add(new ChartModel(item, forNinths));
            else if (item.Timestamp > forNinths && item.Timestamp <= fiveNinths) ChartData.Add(new ChartModel(item, fiveNinths));
            else if (item.Timestamp > fiveNinths && item.Timestamp <= sixNinths) ChartData.Add(new ChartModel(item, sixNinths));
            else if (item.Timestamp > sixNinths && item.Timestamp <= sevenNinths) ChartData.Add(new ChartModel(item, sevenNinths));
            else if (item.Timestamp > sevenNinths && item.Timestamp <= eightNinths) ChartData.Add(new ChartModel(item, eightNinths));
            else if (item.Timestamp > eightNinths && item.Timestamp <= nineNinths) ChartData.Add(new ChartModel(item, nineNinths));
        }
        StateHasChanged();
    }

    public class ChartModel
    {
        public SmtpServerMessageDTO SmtpServerMessage { get; set; }
        public double Timestamp { get; set; }

        public ChartModel(SmtpServerMessageDTO smtpServerMessage, double timestamp)
        {
            SmtpServerMessage = smtpServerMessage;
            Timestamp = timestamp;
        }
    }

}