@using IO.Swagger.Models
@using ApexCharts
@using Color = MudBlazor.Color


@if (SearchedUriList.Count > 0)
{
    <DemoContainer>
        <MudGrid Class="d-flex justify-end">
            <MudItem>
                <MudIconButton @onclick="() => _chart.RenderAsync()" Icon="@Icons.Material.Filled.Refresh" Size="Size.Small" Color="Color.Primary"/>
            </MudItem>
        </MudGrid>
        <ApexChart TItem="ChartModel"
                   @ref="_chart">
            @for (int i = 0; i < SearchedUriList.Count; i++)
            {
                var j = i; // necessary, can't use "i" in YAggregate
                <ApexPointSeries TItem="ChartModel"
                                 Items="ChartData"
                                 Name="@SearchedUriList[i]"
                                 XValue="@(e => new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc).AddSeconds(e.Timestamp).ToString("yyyy-M-d"))"
                                 YAggregate="@(e => e.Count(e => e.HttpRequest.Uri == SearchedUriList[j]))"
                                 OrderBy="e => e.X"
                                 SeriesType="SeriesType.Bar"/>
            }

        </ApexChart>

    </DemoContainer>
}
@if (ChartData.Count > 0)
{
    <MudGrid>
        <MudItem xs="12" sm="8" md="8" lg="8" xl="8">
            <MudTextField @bind-Value="TextValue" Label="Type uri to see comunication in time" Variant="Variant.Text"></MudTextField>
        </MudItem>
        <MudItem xs="12" sm="4" md="4" lg="4" xl="4">
            <MudButton @onclick="() => AddUriHandler()" Color="Color.Primary" Variant="Variant.Filled">Add</MudButton>
        </MudItem>
        <MudItem xs="12" sm="10" md="10" lg="10" xl="10">
            @foreach (var item in SearchedUriList)
            {
                <MudBadge @onclick="() => RemoveUriHandler(item)" Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Class="mx-6 my-4 cursor-pointer">
                    <MudText Typo="Typo.caption">@item</MudText>
                </MudBadge>
            }
        </MudItem>
    </MudGrid>
    
}

@code {

    [Parameter]
    public ICollection<HttpRequestDTO> Data { get; set; } = new List<HttpRequestDTO>();

    public List<ChartModel> ChartData { get; set; } = new List<ChartModel>();
    private ApexChart<ChartModel> _chart;

    private List<string> SearchedUriList { get; set; } = new List<string>();

    public string TextValue { get; set; } = String.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (Data.Count == 0) return;

        ChartData = new List<ChartModel>();
        SearchedUriList = new List<string>();

        var oneNinth = Data.Min(x => x.Timestamp ?? 0);
        var nineNinths = Data!.Max(x => x.Timestamp ?? 0);

        double range = nineNinths - oneNinth;
        var twoNinths = (oneNinth + (range * 0.125));
        var threeNinths = (oneNinth + (range * 0.250));
        var forNinths = (oneNinth + (range * 0.375));
        var fiveNinths = (oneNinth + (range * 0.5));
        var sixNinths = (oneNinth + (range * 0.625));
        var sevenNinths = (oneNinth + (range * 0.75));
        var eightNinths = (oneNinth + (range * 0.875));

        foreach (var item in Data)
        {
            if (item.Timestamp < twoNinths) ChartData.Add(new ChartModel(item, twoNinths));
            else if (item.Timestamp > twoNinths && item.Timestamp <= threeNinths) ChartData.Add(new ChartModel(item, threeNinths));
            else if (item.Timestamp > threeNinths && item.Timestamp <= forNinths) ChartData.Add(new ChartModel(item, forNinths));
            else if (item.Timestamp > forNinths && item.Timestamp <= fiveNinths) ChartData.Add(new ChartModel(item, fiveNinths));
            else if (item.Timestamp > fiveNinths && item.Timestamp <= sixNinths) ChartData.Add(new ChartModel(item, sixNinths));
            else if (item.Timestamp > sixNinths && item.Timestamp <= sevenNinths) ChartData.Add(new ChartModel(item, sevenNinths));
            else if (item.Timestamp > sevenNinths && item.Timestamp <= eightNinths) ChartData.Add(new ChartModel(item, eightNinths));
            else if (item.Timestamp > eightNinths && item.Timestamp <= nineNinths) ChartData.Add(new ChartModel(item, nineNinths));
        }
        StateHasChanged();
    }
    
    private async Task AddUriHandler()
    {
        SearchedUriList.Add(TextValue);
        TextValue = String.Empty;
        if (SearchedUriList.Count > 1)
        {
            await _chart.RenderAsync();
            await _chart.RenderAsync(); // has to be twice or chart not updating
            StateHasChanged();
        }
    }

    private void RemoveUriHandler(string uriToRemove)
    {
        SearchedUriList.RemoveAll(x => x == uriToRemove);
    }

    public class ChartModel
    {
        public HttpRequestDTO HttpRequest { get; set; }
        public double Timestamp { get; set; }

        public ChartModel(HttpRequestDTO httpRequest, double timestamp)
        {
            HttpRequest = httpRequest;
            Timestamp = timestamp;
        }
    }
}