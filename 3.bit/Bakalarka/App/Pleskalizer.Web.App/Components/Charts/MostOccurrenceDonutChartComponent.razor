@if (ChartData != null && ChartLabels != null)
{
    if (Title != String.Empty)
    {
        <MudText Typo="Typo.h6" Class="mx-auto">@Title</MudText>
    }
    if (ChartData.Length > 0)
    {
        <MudPaper Class="pa-4 m-2">
            <MudChart ChartType="ChartType.Donut" Width="300px" Height="300px" InputData="@ChartData" InputLabels="@ChartLabels" LegendPosition="Position.Right">
                <CustomGraphics>
                    <text class="donut-inner-text" x="50%" y="40%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="3">Total</text>
                    <text class="donut-inner-text" x="50%" y="55%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="6">@ChartData.Sum().ToString()</text>
                </CustomGraphics>
            </MudChart>
        </MudPaper>
    }
    else
    {
        <MudText Typo="Typo.h6" Class="mx-auto">No occurrences</MudText>
    }
}


@code {

    [Parameter]
    public List<string>? Data { get; set; }
    [Parameter]
    public string Title { get; set; } = String.Empty;
    

    private double[]? ChartData { get; set; }
    private string[]? ChartLabels { get; set; }
    

    protected override void OnParametersSet()
    {
        if (Data == null) return; 
        
        

        // var topOccurences = Data.GroupBy(m => m)
        //     .Where(g => g.Count() > 1)
        //     .OrderByDescending(g => g.Count())
        //     .Take(10)
        //     .Select(g => new { Sender = g.Key, Occurrences = g.Count() })
        //     .ToList();

        var topOccurrences = GetTopOccurrences();
        

        ChartData = new double[topOccurrences.Count];
        ChartLabels = new string[topOccurrences.Count];

        for (int i = 0; i < topOccurrences.Count; i++)
        {
            ChartData[i] = topOccurrences[i].Item2;
            ChartLabels[i] = $"{ChartData[i]} - {topOccurrences[i].Item1}";
        }
        RemoveEnumSuffix();
        StateHasChanged();
    }
    
    private List<(string, int)> GetTopOccurrences()
    {
        var topOccurrences = Data.GroupBy(m => m)
            .Where(g => g.Count() > 1)
            .OrderByDescending(g => g.Count())
            .Take(10)
            .Select(g => new { Sender = g.Key, Occurrences = g.Count() })
            .ToList();

        if (topOccurrences.Count == 0)
        {
            topOccurrences = Data.GroupBy(m => m)
                .OrderByDescending(g => g.Count())
                .Take(5)
                .Select(g => new { Sender = g.Key, Occurrences = g.Count() })
                .ToList();
        }
        
        return topOccurrences.Select(g=> (g.Sender, g.Occurrences)).ToList();
    }

    private void RemoveEnumSuffix()
    {
        for (int i = 0; i < ChartLabels.Length; i++)
        {
            if (ChartLabels[i].EndsWith("Enum"))
            {
                ChartLabels[i] = ChartLabels[i].Substring(0, ChartLabels[i].Length - 4);
            }
        }
    }

}

