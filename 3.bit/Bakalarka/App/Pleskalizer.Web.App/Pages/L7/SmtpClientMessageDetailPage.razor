@page "/smtp-client/{CaseId:guid}/detail"
@using IO.Swagger.Models
@using System.Net
@using Blazored.LocalStorage
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime;

<PageTitle>SMTP - client message</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">SMTP - client message</MudText>

@if (SmtpMessage == null)
{
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
}
else
{
    <MudText Typo="Typo.caption">
        Session Id:
        @if (SmtpMessage.SessionId != null)
        {
            @SmtpMessage.SessionId
        }
        else
        {
            <b>---</b>
        }
    </MudText>

    // ------------------------------------- Headline section ------------------------------------- 
    <section class="my-5">
        <MudText Typo="Typo.body1">
            <b>Processed on: </b>
            @if (SmtpMessage.Timestamp != null)
            {
                @(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc).AddSeconds(SmtpMessage.Timestamp ?? default(long)).ToLocalTime())
            }
            else
            {
                <b>---</b>
            }
        </MudText>
        <MudExpansionPanels Elevation="1" MultiExpansion="true" Class="mt-3">
            <MudExpansionPanel Text="Mail Path: ">
                <MudText Typo="Typo.body1">@SmtpMessage.MailPath</MudText>
            </MudExpansionPanel>
            <MudExpansionPanel Text="Parameters: ">
                @foreach (var parameter in SmtpMessage.Parameters)
                {
                    <MudText Typo="Typo.body1">@parameter</MudText>
                }
            </MudExpansionPanel>
        </MudExpansionPanels>

    </section>

    // ------------------------------------- Envelope section ------------------------------------- 
    <section class="my-5">
        <MudPaper Elevation="4" Class="py-8 px-10">
            <MudText Typo="Typo.h6" class="mb-3">Envelope</MudText>

            <MudText Typo="Typo.body1">
                <b>Sent on: </b>
                @if (SmtpMessage.Envelope.DateTicks != null)
                {
                    @(new DateTime(1970, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc).AddSeconds(SmtpMessage.Envelope.DateTicks ?? default(long)).ToLocalTime())
                }
                else
                {
                    <b>---</b>
                }
            </MudText>
            <MudText Typo="Typo.body1">
                <b>Subject: </b> @SmtpMessage.Envelope.Subject
            </MudText>
            <MudText Typo="Typo.body1">
                <b>Sender: </b> @SmtpMessage.Envelope.Sender
            </MudText>
            <MudText Typo="Typo.body1">
                <b>In reply to: </b> @SmtpMessage.Envelope.InReplyTo
            </MudText>
            <MudText Typo="Typo.body1">
                <b>Message id: </b> @SmtpMessage.Envelope.MessageId
            </MudText>
            <MudExpansionPanels Elevation="2" MultiExpansion="true" Class="mt-3">
                <MudExpansionPanel Text="Address from, Addres to, Reply to, Cc, Bcc" IsInitiallyExpanded="true">
                    @if (SmtpMessage.Envelope.AddressesFrom == null)
                    {
                        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
                    }
                    else
                    {
                        <EnvelopeInfoTableComponent
                            AddressFrom="@SmtpMessage.Envelope.AddressesFrom"
                            AddressTo="@SmtpMessage.Envelope.AddressesTo" ReplyTo="@SmtpMessage.Envelope.ReplyTo"
                            Cc="@SmtpMessage.Envelope.Cc" Bcc="@SmtpMessage.Envelope.Bcc">
                        </EnvelopeInfoTableComponent>
                    }
                </MudExpansionPanel>
            </MudExpansionPanels>
        </MudPaper>


    </section>

    // ------------------------------------- Email section ------------------------------------- 
    <section class="my-5">
        <MudPaper Elevation="4" Class="py-8 px-10">
            <MudExpansionPanels Elevation="2" MultiExpansion="true">

                <MudText Typo="Typo.h6" class="mb-3">Email</MudText>
                <MudExpansionPanel Text="Headers:" IsInitiallyExpanded=true>
                    <MudTable Items="SmtpMessage.Email.Headers" Dense="true" Hover="true" HorizontalScrollbar="true"
                              SortLabel="Sort By" Elevation="0">
                        <HeaderContent>
                            <MudTh>
                                <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ImfHeaderDTO, object>(x => x.Name)">Name</MudTableSortLabel>
                            </MudTh>
                            <MudTh>
                                <MudTableSortLabel SortBy="new Func<ImfHeaderDTO, object>(x => x.Value)">Value</MudTableSortLabel>
                            </MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Name: ">@context.Name</MudTd>
                            <MudTd DataLabel="Value: ">@context.Value</MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudExpansionPanel>

                <MudExpansionPanel Text="Payload: ">
                    <MudText Typo="Typo.subtitle1">@SmtpMessage.Email.Payload</MudText>
                </MudExpansionPanel>

            </MudExpansionPanels>
        </MudPaper>
    </section>

    // ------------------------------------- Attachments section ------------------------------------- 
    <section class="my-5">
        <MudPaper Elevation="4" Class="py-8 px-10">
            <MudText Typo="Typo.h6" class="mb-3">Attachments</MudText>
            <MudTable Items="SmtpMessage.Attachments" Dense="true" Hover="true" HorizontalScrollbar="true"
                      SortLabel="Sort By" Elevation="0">
                <HeaderContent>
                    <MudTh>
                        <MudTableSortLabel InitialDirection="SortDirection.Ascending" SortBy="new Func<ImfAttachmentDTO, object>(x => x.Filename)">Filename</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ImfAttachmentDTO, object>(x => x.ContentType)">Content type</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ImfAttachmentDTO, object>(x => x.Path)">Path</MudTableSortLabel>
                    </MudTh>
                    <MudTh>
                        <MudTableSortLabel SortBy="new Func<ImfAttachmentDTO, object>(x => x.ContentEncoding)">Content encoding</MudTableSortLabel>
                    </MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Filename: ">@context.Filename</MudTd>
                    <MudTd DataLabel="Content type: ">@context.ContentType</MudTd>
                    <MudTd DataLabel="Path: ">@context.Path</MudTd>
                    <MudTd DataLabel="Content encoding: ">@context.ContentEncoding</MudTd>
                </RowTemplate>
            </MudTable>
        </MudPaper>
    </section>
}

@code {

    [Parameter]
    public Guid CaseId { get; set; }

    [Inject]
    private ILocalStorageService LocalStorage { get; set; } = null!;

    private SmtpClientMessageDTO SmtpMessage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        SmtpMessage = await LocalStorage.GetItemAsync<SmtpClientMessageDTO>("SmtpClientMessageDTODetail");
        await LocalStorage.RemoveItemAsync("SmtpClientMessageDTODetail");
    }
}