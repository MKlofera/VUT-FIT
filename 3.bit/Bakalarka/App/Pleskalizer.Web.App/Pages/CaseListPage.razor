@page "/case/list"
@using Pleskalizer.Web.BL.Facades
@using Blazored.LocalStorage
@using IO.Swagger.Models

<PageTitle>Cases</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Cases</MudText>
@if (SelectedCaseId == Guid.Empty)
{
    <MudAlert Severity="Severity.Warning" ContentAlignment="HorizontalAlignment.Center">Select a case</MudAlert>
}
@if (Data.Items == null)
{
    <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true"/>
}
else
{
    <MudText Typo="Typo.caption" GutterBottom="true">Total cases: @Data.Items.Count.ToString()</MudText>

    <MudGrid>

        @foreach (var caseDetail in Data.Items)
        {
            <MudItem xs="12" sm="12" md="10" lg="10" xl="10">
                <MudPaper @onclick="() => SetCaseIdToLocalStorage(caseDetail.Id)"
                          Class=@GetClass(caseDetail.Id)
                          Elevation="3">
                    <MudItem xs="10" sm="10" md="10" lg="10" xl="10">
                        <MudText Typo="Typo.subtitle2">@caseDetail.Name</MudText>
                        <MudText Typo="Typo.body2">@caseDetail.Description</MudText>
                    </MudItem>

                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="12" md="2" lg="2" xl="2" @onclick="() => NavigateToCaseDetail(caseDetail.Id)">
                <MudPaper Elevation="3" Height="100%" Class="d-flex justify-content-center align-content-center cursor-pointer">
                    <MudText Typo="Typo.subtitle2" Class="my-auto">Detail</MudText>
                    <MudIcon Icon="@Icons.Material.Filled.ArrowRightAlt" Title="API" Class="my-auto"/>
                </MudPaper>
            </MudItem>
        }
    </MudGrid>
}


@code {

    [Inject]
    private NavigationManager NavigationManager { get; set; } = null!;

    [Inject]
    private ILocalStorageService LocalStorage { get; set; } = null!;

    [Inject]
    private CaseFacade CaseFacade { get; set; } = null!;

    private Guid SelectedCaseId { get; set; } = Guid.Empty;

    private CaseListDTOPageQueryResultDTO Data { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        Data = await CaseFacade.GetAll(new byte[] { 1 }, 20);
        if (await LocalStorage.ContainKeyAsync("selectedCase"))
        {
            var localStorageGuid = await LocalStorage.GetItemAsync<Guid>("selectedCase");
            if (Data.Items.Any(x => x.Id == localStorageGuid))
            {
                SelectedCaseId = localStorageGuid;
            }
        }
    }

    private async void SetCaseIdToLocalStorage(Guid? caseId)
    {
        SelectedCaseId = caseId ?? Guid.Empty;
        await LocalStorage.SetItemAsync("selectedCase", caseId);
    }

    private string GetClass(Guid? caseId)
    {
        if (SelectedCaseId == caseId)
        {
            return "pa-4 ma-2 cursor-pointer align-center d-flex justify-space-between mud-theme-primary";
        }
        return "pa-4 ma-2 cursor-pointer align-center d-flex justify-space-between";
    }

    private void NavigateToCaseDetail(Guid? caseId)
    {
        NavigationManager.NavigateTo($"case/{caseId}");
    }

}