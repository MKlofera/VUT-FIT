/*
 * REST API Decoder
 *
 * REST API Versions
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Pleskalizer.Common.Enums;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class L3ConversationStatisticsDetailDTO : IEquatable<L3ConversationStatisticsDetailDTO>
    { 
        
        public L3ConversationStatisticsDetailDTO(Guid? captureId, string addressA, string addressB, ProtocolL3Enum? protocolL3)
        {
            CaptureId = captureId;
            AddressA = addressA;
            AddressB = addressB;
            ProtocolL3 = protocolL3;
        }
        public L3ConversationStatisticsDetailDTO()
        {
            CaptureId = Guid.NewGuid();
            AddressA = String.Empty;
            AddressB = String.Empty;
            ProtocolL3 = 0;
        }
        /// <summary>
        /// Gets or Sets CaptureId
        /// </summary>
        [Required]

        [DataMember(Name="captureId")]
        public Guid? CaptureId { get; set; }

        /// <summary>
        /// Gets or Sets AddressA
        /// </summary>
        [Required]

        [DataMember(Name="addressA")]
        public string AddressA { get; set; }

        /// <summary>
        /// Gets or Sets AddressB
        /// </summary>
        [Required]

        [DataMember(Name="addressB")]
        public string AddressB { get; set; }
        
        /// <summary>
        /// Gets or Sets ProtocolL3
        /// </summary>
        [Required]

        [DataMember(Name="protocolL3")]
        public ProtocolL3Enum? ProtocolL3 { get; set; }

        /// <summary>
        /// Gets or Sets AToBFlowStatisticsSnapshots
        /// </summary>
        [Required]

        [DataMember(Name="aToBFlowStatisticsSnapshots")]
        public List<FlowStatisticsSnapshotDTO> AToBFlowStatisticsSnapshots { get; set; }

        /// <summary>
        /// Gets or Sets BToAFlowStatisticsSnapshots
        /// </summary>
        [Required]

        [DataMember(Name="bToAFlowStatisticsSnapshots")]
        public List<FlowStatisticsSnapshotDTO> BToAFlowStatisticsSnapshots { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class L3ConversationStatisticsDetailDTO {\n");
            sb.Append("  CaptureId: ").Append(CaptureId).Append("\n");
            sb.Append("  AddressA: ").Append(AddressA).Append("\n");
            sb.Append("  AddressB: ").Append(AddressB).Append("\n");
            sb.Append("  ProtocolL3: ").Append(ProtocolL3).Append("\n");
            sb.Append("  AToBFlowStatisticsSnapshots: ").Append(AToBFlowStatisticsSnapshots).Append("\n");
            sb.Append("  BToAFlowStatisticsSnapshots: ").Append(BToAFlowStatisticsSnapshots).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((L3ConversationStatisticsDetailDTO)obj);
        }

        /// <summary>
        /// Returns true if L3ConversationStatisticsDetailDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of L3ConversationStatisticsDetailDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(L3ConversationStatisticsDetailDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CaptureId == other.CaptureId ||
                    CaptureId != null &&
                    CaptureId.Equals(other.CaptureId)
                ) && 
                (
                    AddressA == other.AddressA ||
                    AddressA != null &&
                    AddressA.Equals(other.AddressA)
                ) && 
                (
                    AddressB == other.AddressB ||
                    AddressB != null &&
                    AddressB.Equals(other.AddressB)
                ) && 
                (
                    ProtocolL3 == other.ProtocolL3 ||
                    ProtocolL3 != null &&
                    ProtocolL3.Equals(other.ProtocolL3)
                ) && 
                (
                    AToBFlowStatisticsSnapshots == other.AToBFlowStatisticsSnapshots ||
                    AToBFlowStatisticsSnapshots != null &&
                    AToBFlowStatisticsSnapshots.SequenceEqual(other.AToBFlowStatisticsSnapshots)
                ) && 
                (
                    BToAFlowStatisticsSnapshots == other.BToAFlowStatisticsSnapshots ||
                    BToAFlowStatisticsSnapshots != null &&
                    BToAFlowStatisticsSnapshots.SequenceEqual(other.BToAFlowStatisticsSnapshots)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CaptureId != null)
                    hashCode = hashCode * 59 + CaptureId.GetHashCode();
                    if (AddressA != null)
                    hashCode = hashCode * 59 + AddressA.GetHashCode();
                    if (AddressB != null)
                    hashCode = hashCode * 59 + AddressB.GetHashCode();
                    if (ProtocolL3 != null)
                    hashCode = hashCode * 59 + ProtocolL3.GetHashCode();
                    if (AToBFlowStatisticsSnapshots != null)
                    hashCode = hashCode * 59 + AToBFlowStatisticsSnapshots.GetHashCode();
                    if (BToAFlowStatisticsSnapshots != null)
                    hashCode = hashCode * 59 + BToAFlowStatisticsSnapshots.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(L3ConversationStatisticsDetailDTO left, L3ConversationStatisticsDetailDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(L3ConversationStatisticsDetailDTO left, L3ConversationStatisticsDetailDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
