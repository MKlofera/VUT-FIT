/*
 * REST API Decoder
 *
 * REST API Versions
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DnsFlags : IEquatable<DnsFlags>
    {
        public DnsFlags(OpCodeEnum? opCode, bool? authoritative, bool? truncated, bool? recursionDesired, bool? recursionAvailable, bool? answerAuthenticated, bool? nonAuthenticatedData)
        {
            OpCode = opCode;
            Authoritative = authoritative;
            Truncated = truncated;
            RecursionDesired = recursionDesired;
            RecursionAvailable = recursionAvailable;
            AnswerAuthenticated = answerAuthenticated;
            NonAuthenticatedData = nonAuthenticatedData;
        }

        public DnsFlags()
        {
            OpCode = null;
            Authoritative = null;
            Truncated = null;
            RecursionDesired = null;
            RecursionAvailable = null;
            AnswerAuthenticated = null;
            NonAuthenticatedData = null;
        }

        /// <summary>
        /// Gets or Sets OpCode
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OpCodeEnum
        {
            /// <summary>
            /// Enum QueryEnum for Query
            /// </summary>
            [EnumMember(Value = "Query")]
            QueryEnum = 0,
            /// <summary>
            /// Enum IQueryEnum for IQuery
            /// </summary>
            [EnumMember(Value = "IQuery")]
            IQueryEnum = 1,
            /// <summary>
            /// Enum StatusEnum for Status
            /// </summary>
            [EnumMember(Value = "Status")]
            StatusEnum = 2,
            /// <summary>
            /// Enum Unassigned2Enum for Unassigned2
            /// </summary>
            [EnumMember(Value = "Unassigned2")]
            Unassigned2Enum = 3,
            /// <summary>
            /// Enum NotifyEnum for Notify
            /// </summary>
            [EnumMember(Value = "Notify")]
            NotifyEnum = 4,
            /// <summary>
            /// Enum UpdateEnum for Update
            /// </summary>
            [EnumMember(Value = "Update")]
            UpdateEnum = 5,
            /// <summary>
            /// Enum DNSStatefulOperationsEnum for DNSStatefulOperations
            /// </summary>
            [EnumMember(Value = "DNSStatefulOperations")]
            DNSStatefulOperationsEnum = 6,
            /// <summary>
            /// Enum Unassigned7Enum for Unassigned7
            /// </summary>
            [EnumMember(Value = "Unassigned7")]
            Unassigned7Enum = 7,
            /// <summary>
            /// Enum Unassigned8Enum for Unassigned8
            /// </summary>
            [EnumMember(Value = "Unassigned8")]
            Unassigned8Enum = 8,
            /// <summary>
            /// Enum Unassigned9Enum for Unassigned9
            /// </summary>
            [EnumMember(Value = "Unassigned9")]
            Unassigned9Enum = 9,
            /// <summary>
            /// Enum Unassigned10Enum for Unassigned10
            /// </summary>
            [EnumMember(Value = "Unassigned10")]
            Unassigned10Enum = 10,
            /// <summary>
            /// Enum Unassigned11Enum for Unassigned11
            /// </summary>
            [EnumMember(Value = "Unassigned11")]
            Unassigned11Enum = 11,
            /// <summary>
            /// Enum Unassigned12Enum for Unassigned12
            /// </summary>
            [EnumMember(Value = "Unassigned12")]
            Unassigned12Enum = 12,
            /// <summary>
            /// Enum Unassigned13Enum for Unassigned13
            /// </summary>
            [EnumMember(Value = "Unassigned13")]
            Unassigned13Enum = 13,
            /// <summary>
            /// Enum Unassigned14Enum for Unassigned14
            /// </summary>
            [EnumMember(Value = "Unassigned14")]
            Unassigned14Enum = 14,
            /// <summary>
            /// Enum Unassigned15Enum for Unassigned15
            /// </summary>
            [EnumMember(Value = "Unassigned15")]
            Unassigned15Enum = 15        }

        /// <summary>
        /// Gets or Sets OpCode
        /// </summary>
        [Required]

        [DataMember(Name="opCode")]
        public OpCodeEnum? OpCode { get; set; }

        /// <summary>
        /// Gets or Sets Authoritative
        /// </summary>

        [DataMember(Name="authoritative")]
        public bool? Authoritative { get; set; }

        /// <summary>
        /// Gets or Sets Truncated
        /// </summary>
        [Required]

        [DataMember(Name="truncated")]
        public bool? Truncated { get; set; }

        /// <summary>
        /// Gets or Sets RecursionDesired
        /// </summary>
        [Required]

        [DataMember(Name="recursionDesired")]
        public bool? RecursionDesired { get; set; }

        /// <summary>
        /// Gets or Sets RecursionAvailable
        /// </summary>

        [DataMember(Name="recursionAvailable")]
        public bool? RecursionAvailable { get; set; }

        /// <summary>
        /// Gets or Sets AnswerAuthenticated
        /// </summary>

        [DataMember(Name="answerAuthenticated")]
        public bool? AnswerAuthenticated { get; set; }

        /// <summary>
        /// Gets or Sets NonAuthenticatedData
        /// </summary>
        [Required]

        [DataMember(Name="nonAuthenticatedData")]
        public bool? NonAuthenticatedData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DnsFlags {\n");
            sb.Append("  OpCode: ").Append(OpCode).Append("\n");
            sb.Append("  Authoritative: ").Append(Authoritative).Append("\n");
            sb.Append("  Truncated: ").Append(Truncated).Append("\n");
            sb.Append("  RecursionDesired: ").Append(RecursionDesired).Append("\n");
            sb.Append("  RecursionAvailable: ").Append(RecursionAvailable).Append("\n");
            sb.Append("  AnswerAuthenticated: ").Append(AnswerAuthenticated).Append("\n");
            sb.Append("  NonAuthenticatedData: ").Append(NonAuthenticatedData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DnsFlags)obj);
        }

        /// <summary>
        /// Returns true if DnsFlags instances are equal
        /// </summary>
        /// <param name="other">Instance of DnsFlags to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DnsFlags other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OpCode == other.OpCode ||
                    OpCode != null &&
                    OpCode.Equals(other.OpCode)
                ) && 
                (
                    Authoritative == other.Authoritative ||
                    Authoritative != null &&
                    Authoritative.Equals(other.Authoritative)
                ) && 
                (
                    Truncated == other.Truncated ||
                    Truncated != null &&
                    Truncated.Equals(other.Truncated)
                ) && 
                (
                    RecursionDesired == other.RecursionDesired ||
                    RecursionDesired != null &&
                    RecursionDesired.Equals(other.RecursionDesired)
                ) && 
                (
                    RecursionAvailable == other.RecursionAvailable ||
                    RecursionAvailable != null &&
                    RecursionAvailable.Equals(other.RecursionAvailable)
                ) && 
                (
                    AnswerAuthenticated == other.AnswerAuthenticated ||
                    AnswerAuthenticated != null &&
                    AnswerAuthenticated.Equals(other.AnswerAuthenticated)
                ) && 
                (
                    NonAuthenticatedData == other.NonAuthenticatedData ||
                    NonAuthenticatedData != null &&
                    NonAuthenticatedData.Equals(other.NonAuthenticatedData)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OpCode != null)
                    hashCode = hashCode * 59 + OpCode.GetHashCode();
                    if (Authoritative != null)
                    hashCode = hashCode * 59 + Authoritative.GetHashCode();
                    if (Truncated != null)
                    hashCode = hashCode * 59 + Truncated.GetHashCode();
                    if (RecursionDesired != null)
                    hashCode = hashCode * 59 + RecursionDesired.GetHashCode();
                    if (RecursionAvailable != null)
                    hashCode = hashCode * 59 + RecursionAvailable.GetHashCode();
                    if (AnswerAuthenticated != null)
                    hashCode = hashCode * 59 + AnswerAuthenticated.GetHashCode();
                    if (NonAuthenticatedData != null)
                    hashCode = hashCode * 59 + NonAuthenticatedData.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DnsFlags left, DnsFlags right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DnsFlags left, DnsFlags right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
