/*
 * REST API Decoder
 *
 * REST API Versions
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FlowStatisticsSnapshotDTO : IEquatable<FlowStatisticsSnapshotDTO>
    {
        public FlowStatisticsSnapshotDTO(long? firstSeenTimestampTicks, long? lastSeenTimestampTicks, long? updatedAtTicks, long? processedFrames, long? processedHeaderBytes, long? processedPayloadBytes, long? malformedFrames, long? malformedBytes, long? discardedFrames, long? discardedBytes)
        {
            FirstSeenTimestampTicks = firstSeenTimestampTicks;
            LastSeenTimestampTicks = lastSeenTimestampTicks;
            UpdatedAtTicks = updatedAtTicks;
            ProcessedFrames = processedFrames;
            ProcessedHeaderBytes = processedHeaderBytes;
            ProcessedPayloadBytes = processedPayloadBytes;
            MalformedFrames = malformedFrames;
            MalformedBytes = malformedBytes;
            DiscardedFrames = discardedFrames;
            DiscardedBytes = discardedBytes;
        }
        public FlowStatisticsSnapshotDTO()
        {
            FirstSeenTimestampTicks = 0;
            LastSeenTimestampTicks = 0;
            UpdatedAtTicks = 0;
            ProcessedFrames = 0;
            ProcessedHeaderBytes = 0;
            ProcessedPayloadBytes = 0;
            MalformedFrames = 0;
            MalformedBytes = 0;
            DiscardedFrames = 0;
            DiscardedBytes = 0;
        }

        /// <summary>
        /// Gets or Sets FirstSeenTimestampTicks
        /// </summary>

        [DataMember(Name="firstSeenTimestampTicks")]
        public long? FirstSeenTimestampTicks { get; set; }

        /// <summary>
        /// Gets or Sets LastSeenTimestampTicks
        /// </summary>

        [DataMember(Name="lastSeenTimestampTicks")]
        public long? LastSeenTimestampTicks { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAtTicks
        /// </summary>

        [DataMember(Name="updatedAtTicks")]
        public long? UpdatedAtTicks { get; set; }

        /// <summary>
        /// Gets or Sets ProcessedFrames
        /// </summary>

        [DataMember(Name="processedFrames")]
        public long? ProcessedFrames { get; set; }

        /// <summary>
        /// Gets or Sets ProcessedHeaderBytes
        /// </summary>

        [DataMember(Name="processedHeaderBytes")]
        public long? ProcessedHeaderBytes { get; set; }

        /// <summary>
        /// Gets or Sets ProcessedPayloadBytes
        /// </summary>

        [DataMember(Name="processedPayloadBytes")]
        public long? ProcessedPayloadBytes { get; set; }

        /// <summary>
        /// Gets or Sets MalformedFrames
        /// </summary>

        [DataMember(Name="malformedFrames")]
        public long? MalformedFrames { get; set; }

        /// <summary>
        /// Gets or Sets MalformedBytes
        /// </summary>

        [DataMember(Name="malformedBytes")]
        public long? MalformedBytes { get; set; }

        /// <summary>
        /// Gets or Sets DiscardedFrames
        /// </summary>

        [DataMember(Name="discardedFrames")]
        public long? DiscardedFrames { get; set; }

        /// <summary>
        /// Gets or Sets DiscardedBytes
        /// </summary>

        [DataMember(Name="discardedBytes")]
        public long? DiscardedBytes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FlowStatisticsSnapshotDTO {\n");
            sb.Append("  FirstSeenTimestampTicks: ").Append(FirstSeenTimestampTicks).Append("\n");
            sb.Append("  LastSeenTimestampTicks: ").Append(LastSeenTimestampTicks).Append("\n");
            sb.Append("  UpdatedAtTicks: ").Append(UpdatedAtTicks).Append("\n");
            sb.Append("  ProcessedFrames: ").Append(ProcessedFrames).Append("\n");
            sb.Append("  ProcessedHeaderBytes: ").Append(ProcessedHeaderBytes).Append("\n");
            sb.Append("  ProcessedPayloadBytes: ").Append(ProcessedPayloadBytes).Append("\n");
            sb.Append("  MalformedFrames: ").Append(MalformedFrames).Append("\n");
            sb.Append("  MalformedBytes: ").Append(MalformedBytes).Append("\n");
            sb.Append("  DiscardedFrames: ").Append(DiscardedFrames).Append("\n");
            sb.Append("  DiscardedBytes: ").Append(DiscardedBytes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FlowStatisticsSnapshotDTO)obj);
        }

        /// <summary>
        /// Returns true if FlowStatisticsSnapshotDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of FlowStatisticsSnapshotDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FlowStatisticsSnapshotDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FirstSeenTimestampTicks == other.FirstSeenTimestampTicks ||
                    FirstSeenTimestampTicks != null &&
                    FirstSeenTimestampTicks.Equals(other.FirstSeenTimestampTicks)
                ) && 
                (
                    LastSeenTimestampTicks == other.LastSeenTimestampTicks ||
                    LastSeenTimestampTicks != null &&
                    LastSeenTimestampTicks.Equals(other.LastSeenTimestampTicks)
                ) && 
                (
                    UpdatedAtTicks == other.UpdatedAtTicks ||
                    UpdatedAtTicks != null &&
                    UpdatedAtTicks.Equals(other.UpdatedAtTicks)
                ) && 
                (
                    ProcessedFrames == other.ProcessedFrames ||
                    ProcessedFrames != null &&
                    ProcessedFrames.Equals(other.ProcessedFrames)
                ) && 
                (
                    ProcessedHeaderBytes == other.ProcessedHeaderBytes ||
                    ProcessedHeaderBytes != null &&
                    ProcessedHeaderBytes.Equals(other.ProcessedHeaderBytes)
                ) && 
                (
                    ProcessedPayloadBytes == other.ProcessedPayloadBytes ||
                    ProcessedPayloadBytes != null &&
                    ProcessedPayloadBytes.Equals(other.ProcessedPayloadBytes)
                ) && 
                (
                    MalformedFrames == other.MalformedFrames ||
                    MalformedFrames != null &&
                    MalformedFrames.Equals(other.MalformedFrames)
                ) && 
                (
                    MalformedBytes == other.MalformedBytes ||
                    MalformedBytes != null &&
                    MalformedBytes.Equals(other.MalformedBytes)
                ) && 
                (
                    DiscardedFrames == other.DiscardedFrames ||
                    DiscardedFrames != null &&
                    DiscardedFrames.Equals(other.DiscardedFrames)
                ) && 
                (
                    DiscardedBytes == other.DiscardedBytes ||
                    DiscardedBytes != null &&
                    DiscardedBytes.Equals(other.DiscardedBytes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FirstSeenTimestampTicks != null)
                    hashCode = hashCode * 59 + FirstSeenTimestampTicks.GetHashCode();
                    if (LastSeenTimestampTicks != null)
                    hashCode = hashCode * 59 + LastSeenTimestampTicks.GetHashCode();
                    if (UpdatedAtTicks != null)
                    hashCode = hashCode * 59 + UpdatedAtTicks.GetHashCode();
                    if (ProcessedFrames != null)
                    hashCode = hashCode * 59 + ProcessedFrames.GetHashCode();
                    if (ProcessedHeaderBytes != null)
                    hashCode = hashCode * 59 + ProcessedHeaderBytes.GetHashCode();
                    if (ProcessedPayloadBytes != null)
                    hashCode = hashCode * 59 + ProcessedPayloadBytes.GetHashCode();
                    if (MalformedFrames != null)
                    hashCode = hashCode * 59 + MalformedFrames.GetHashCode();
                    if (MalformedBytes != null)
                    hashCode = hashCode * 59 + MalformedBytes.GetHashCode();
                    if (DiscardedFrames != null)
                    hashCode = hashCode * 59 + DiscardedFrames.GetHashCode();
                    if (DiscardedBytes != null)
                    hashCode = hashCode * 59 + DiscardedBytes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FlowStatisticsSnapshotDTO left, FlowStatisticsSnapshotDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FlowStatisticsSnapshotDTO left, FlowStatisticsSnapshotDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
