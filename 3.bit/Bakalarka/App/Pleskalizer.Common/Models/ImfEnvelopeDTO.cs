/*
 * REST API Decoder
 *
 * REST API Versions
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ImfEnvelopeDTO : IEquatable<ImfEnvelopeDTO>
    { 
        /// <summary>
        /// Gets or Sets DateTicks
        /// </summary>
        [Required]

        [DataMember(Name="dateTicks")]
        public long? DateTicks { get; set; }

        /// <summary>
        /// Gets or Sets Subject
        /// </summary>
        [Required]

        [DataMember(Name="subject")]
        public string Subject { get; set; }

        /// <summary>
        /// Gets or Sets AddressesFrom
        /// </summary>

        [DataMember(Name="addressesFrom")]
        public List<string> AddressesFrom { get; set; }

        /// <summary>
        /// Gets or Sets Sender
        /// </summary>

        [DataMember(Name="sender")]
        public string Sender { get; set; }

        /// <summary>
        /// Gets or Sets ReplyTo
        /// </summary>

        [DataMember(Name="replyTo")]
        public List<string> ReplyTo { get; set; }

        /// <summary>
        /// Gets or Sets AddressesTo
        /// </summary>

        [DataMember(Name="addressesTo")]
        public List<string> AddressesTo { get; set; }

        /// <summary>
        /// Gets or Sets Cc
        /// </summary>

        [DataMember(Name="cc")]
        public List<string> Cc { get; set; }

        /// <summary>
        /// Gets or Sets Bcc
        /// </summary>

        [DataMember(Name="bcc")]
        public List<string> Bcc { get; set; }

        /// <summary>
        /// Gets or Sets InReplyTo
        /// </summary>

        [DataMember(Name="inReplyTo")]
        public string InReplyTo { get; set; }

        /// <summary>
        /// Gets or Sets MessageId
        /// </summary>

        [DataMember(Name="messageId")]
        public string MessageId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImfEnvelopeDTO {\n");
            sb.Append("  DateTicks: ").Append(DateTicks).Append("\n");
            sb.Append("  Subject: ").Append(Subject).Append("\n");
            sb.Append("  AddressesFrom: ").Append(AddressesFrom).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  ReplyTo: ").Append(ReplyTo).Append("\n");
            sb.Append("  AddressesTo: ").Append(AddressesTo).Append("\n");
            sb.Append("  Cc: ").Append(Cc).Append("\n");
            sb.Append("  Bcc: ").Append(Bcc).Append("\n");
            sb.Append("  InReplyTo: ").Append(InReplyTo).Append("\n");
            sb.Append("  MessageId: ").Append(MessageId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ImfEnvelopeDTO)obj);
        }

        /// <summary>
        /// Returns true if ImfEnvelopeDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of ImfEnvelopeDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImfEnvelopeDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DateTicks == other.DateTicks ||
                    DateTicks != null &&
                    DateTicks.Equals(other.DateTicks)
                ) && 
                (
                    Subject == other.Subject ||
                    Subject != null &&
                    Subject.Equals(other.Subject)
                ) && 
                (
                    AddressesFrom == other.AddressesFrom ||
                    AddressesFrom != null &&
                    AddressesFrom.SequenceEqual(other.AddressesFrom)
                ) && 
                (
                    Sender == other.Sender ||
                    Sender != null &&
                    Sender.Equals(other.Sender)
                ) && 
                (
                    ReplyTo == other.ReplyTo ||
                    ReplyTo != null &&
                    ReplyTo.SequenceEqual(other.ReplyTo)
                ) && 
                (
                    AddressesTo == other.AddressesTo ||
                    AddressesTo != null &&
                    AddressesTo.SequenceEqual(other.AddressesTo)
                ) && 
                (
                    Cc == other.Cc ||
                    Cc != null &&
                    Cc.SequenceEqual(other.Cc)
                ) && 
                (
                    Bcc == other.Bcc ||
                    Bcc != null &&
                    Bcc.SequenceEqual(other.Bcc)
                ) && 
                (
                    InReplyTo == other.InReplyTo ||
                    InReplyTo != null &&
                    InReplyTo.Equals(other.InReplyTo)
                ) && 
                (
                    MessageId == other.MessageId ||
                    MessageId != null &&
                    MessageId.Equals(other.MessageId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DateTicks != null)
                    hashCode = hashCode * 59 + DateTicks.GetHashCode();
                    if (Subject != null)
                    hashCode = hashCode * 59 + Subject.GetHashCode();
                    if (AddressesFrom != null)
                    hashCode = hashCode * 59 + AddressesFrom.GetHashCode();
                    if (Sender != null)
                    hashCode = hashCode * 59 + Sender.GetHashCode();
                    if (ReplyTo != null)
                    hashCode = hashCode * 59 + ReplyTo.GetHashCode();
                    if (AddressesTo != null)
                    hashCode = hashCode * 59 + AddressesTo.GetHashCode();
                    if (Cc != null)
                    hashCode = hashCode * 59 + Cc.GetHashCode();
                    if (Bcc != null)
                    hashCode = hashCode * 59 + Bcc.GetHashCode();
                    if (InReplyTo != null)
                    hashCode = hashCode * 59 + InReplyTo.GetHashCode();
                    if (MessageId != null)
                    hashCode = hashCode * 59 + MessageId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ImfEnvelopeDTO left, ImfEnvelopeDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ImfEnvelopeDTO left, ImfEnvelopeDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
