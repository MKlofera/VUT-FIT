/*
 * REST API Decoder
 *
 * REST API Versions
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PopClientMessageDTO : IEquatable<PopClientMessageDTO>
    {
        public PopClientMessageDTO(Guid? sessionId, CommandEnum? command, List<string> arguments, long? timestamp)
        {
            SessionId = sessionId;
            Command = command;
            Arguments = arguments;
            Timestamp = timestamp;
        }

        public PopClientMessageDTO()
        {
            SessionId = Guid.NewGuid();
            Command = CommandEnum.USEREnum;
            Arguments = new List<string>();
            Timestamp = 0;
        }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [Required]

        [DataMember(Name="sessionId")]
        public Guid? SessionId { get; set; }

        /// <summary>
        /// Gets or Sets Command
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CommandEnum
        {
            /// <summary>
            /// Enum USEREnum for USER
            /// </summary>
            [EnumMember(Value = "USER")]
            USEREnum = 0,
            /// <summary>
            /// Enum UIDLEnum for UIDL
            /// </summary>
            [EnumMember(Value = "UIDL")]
            UIDLEnum = 1,
            /// <summary>
            /// Enum PASSEnum for PASS
            /// </summary>
            [EnumMember(Value = "PASS")]
            PASSEnum = 2,
            /// <summary>
            /// Enum QUITEnum for QUIT
            /// </summary>
            [EnumMember(Value = "QUIT")]
            QUITEnum = 3,
            /// <summary>
            /// Enum STATEnum for STAT
            /// </summary>
            [EnumMember(Value = "STAT")]
            STATEnum = 4,
            /// <summary>
            /// Enum LISTEnum for LIST
            /// </summary>
            [EnumMember(Value = "LIST")]
            LISTEnum = 5,
            /// <summary>
            /// Enum RETREnum for RETR
            /// </summary>
            [EnumMember(Value = "RETR")]
            RETREnum = 6,
            /// <summary>
            /// Enum DELEEnum for DELE
            /// </summary>
            [EnumMember(Value = "DELE")]
            DELEEnum = 7,
            /// <summary>
            /// Enum CAPAEnum for CAPA
            /// </summary>
            [EnumMember(Value = "CAPA")]
            CAPAEnum = 8,
            /// <summary>
            /// Enum NOOPEnum for NOOP
            /// </summary>
            [EnumMember(Value = "NOOP")]
            NOOPEnum = 9,
            /// <summary>
            /// Enum RSETEnum for RSET
            /// </summary>
            [EnumMember(Value = "RSET")]
            RSETEnum = 10,
            /// <summary>
            /// Enum NOCOMMANDEnum for NO_COMMAND
            /// </summary>
            [EnumMember(Value = "NO_COMMAND")]
            NOCOMMANDEnum = 11        }

        /// <summary>
        /// Gets or Sets Command
        /// </summary>
        [Required]

        [DataMember(Name="command")]
        public CommandEnum? Command { get; set; }

        /// <summary>
        /// Gets or Sets Arguments
        /// </summary>

        [DataMember(Name="arguments")]
        public List<string> Arguments { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [Required]

        [DataMember(Name="timestamp")]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PopClientMessageDTO {\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Command: ").Append(Command).Append("\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PopClientMessageDTO)obj);
        }

        /// <summary>
        /// Returns true if PopClientMessageDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of PopClientMessageDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PopClientMessageDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SessionId == other.SessionId ||
                    SessionId != null &&
                    SessionId.Equals(other.SessionId)
                ) && 
                (
                    Command == other.Command ||
                    Command != null &&
                    Command.Equals(other.Command)
                ) && 
                (
                    Arguments == other.Arguments ||
                    Arguments != null &&
                    Arguments.SequenceEqual(other.Arguments)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SessionId != null)
                    hashCode = hashCode * 59 + SessionId.GetHashCode();
                    if (Command != null)
                    hashCode = hashCode * 59 + Command.GetHashCode();
                    if (Arguments != null)
                    hashCode = hashCode * 59 + Arguments.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PopClientMessageDTO left, PopClientMessageDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PopClientMessageDTO left, PopClientMessageDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
