/*
 * REST API Decoder
 *
 * REST API Versions
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DnsDTO : IEquatable<DnsDTO>
    {
        public DnsDTO(Guid? sessionId, TypeEnum? type, DnsFlags flags, ReplyCodeEnum? replyCode, int? transactionId, long? timestamp, List<DnsQuestion> questions, List<DnsResourceRecord> answers, List<DnsResourceRecord> authorities, List<DnsResourceRecord> additional)
        {
            SessionId = sessionId;
            Type = type;
            Flags = flags;
            ReplyCode = replyCode;
            TransactionId = transactionId;
            Timestamp = timestamp;
            Questions = questions;
            Answers = answers;
            Authorities = authorities;
            Additional = additional;
        }

        public DnsDTO()
        {
            SessionId = Guid.Empty;
            Type = 0;
            Flags = new DnsFlags();
            ReplyCode = 0;
            TransactionId = 0;
            Timestamp = 0;
            Questions = new List<DnsQuestion>();
            Answers = new List<DnsResourceRecord>();
            Authorities = new List<DnsResourceRecord>();
            Additional = new List<DnsResourceRecord>();
        }

        /// <summary>
        /// Gets or Sets SessionId
        /// </summary>
        [Required]

        [DataMember(Name="sessionId")]
        public Guid? SessionId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum QueryEnum for Query
            /// </summary>
            [EnumMember(Value = "Query")]
            QueryEnum = 0,
            /// <summary>
            /// Enum AnswerEnum for Answer
            /// </summary>
            [EnumMember(Value = "Answer")]
            AnswerEnum = 1        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]

        [DataMember(Name="type")]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [Required]

        [DataMember(Name="flags")]
        public DnsFlags Flags { get; set; }

        /// <summary>
        /// Gets or Sets ReplyCode
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReplyCodeEnum
        {
            /// <summary>
            /// Enum NoErrorEnum for NoError
            /// </summary>
            [EnumMember(Value = "NoError")]
            NoErrorEnum = 0,
            /// <summary>
            /// Enum FormatErrorEnum for FormatError
            /// </summary>
            [EnumMember(Value = "FormatError")]
            FormatErrorEnum = 1,
            /// <summary>
            /// Enum ServerFailureEnum for ServerFailure
            /// </summary>
            [EnumMember(Value = "ServerFailure")]
            ServerFailureEnum = 2,
            /// <summary>
            /// Enum NameErrorEnum for NameError
            /// </summary>
            [EnumMember(Value = "NameError")]
            NameErrorEnum = 3,
            /// <summary>
            /// Enum NotImplementedEnum for NotImplemented
            /// </summary>
            [EnumMember(Value = "NotImplemented")]
            NotImplementedEnum = 4,
            /// <summary>
            /// Enum RefusedEnum for Refused
            /// </summary>
            [EnumMember(Value = "Refused")]
            RefusedEnum = 5,
            /// <summary>
            /// Enum Reserved6Enum for Reserved6
            /// </summary>
            [EnumMember(Value = "Reserved6")]
            Reserved6Enum = 6,
            /// <summary>
            /// Enum Reserved7Enum for Reserved7
            /// </summary>
            [EnumMember(Value = "Reserved7")]
            Reserved7Enum = 7,
            /// <summary>
            /// Enum Reserved8Enum for Reserved8
            /// </summary>
            [EnumMember(Value = "Reserved8")]
            Reserved8Enum = 8,
            /// <summary>
            /// Enum Reserved9Enum for Reserved9
            /// </summary>
            [EnumMember(Value = "Reserved9")]
            Reserved9Enum = 9,
            /// <summary>
            /// Enum Reserved10Enum for Reserved10
            /// </summary>
            [EnumMember(Value = "Reserved10")]
            Reserved10Enum = 10,
            /// <summary>
            /// Enum Reserved11Enum for Reserved11
            /// </summary>
            [EnumMember(Value = "Reserved11")]
            Reserved11Enum = 11,
            /// <summary>
            /// Enum Reserved12Enum for Reserved12
            /// </summary>
            [EnumMember(Value = "Reserved12")]
            Reserved12Enum = 12,
            /// <summary>
            /// Enum Reserved13Enum for Reserved13
            /// </summary>
            [EnumMember(Value = "Reserved13")]
            Reserved13Enum = 13,
            /// <summary>
            /// Enum Reserved14Enum for Reserved14
            /// </summary>
            [EnumMember(Value = "Reserved14")]
            Reserved14Enum = 14,
            /// <summary>
            /// Enum Reserved15Enum for Reserved15
            /// </summary>
            [EnumMember(Value = "Reserved15")]
            Reserved15Enum = 15,
            /// <summary>
            /// Enum NotSupportedEnum for NotSupported
            /// </summary>
            [EnumMember(Value = "NotSupported")]
            NotSupportedEnum = 16        }

        /// <summary>
        /// Gets or Sets ReplyCode
        /// </summary>

        [DataMember(Name="replyCode")]
        public ReplyCodeEnum? ReplyCode { get; set; }

        /// <summary>
        /// Gets or Sets TransactionId
        /// </summary>
        [Required]

        [DataMember(Name="transactionId")]
        public int? TransactionId { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [Required]

        [DataMember(Name="timestamp")]
        public long? Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets Questions
        /// </summary>

        [DataMember(Name="questions")]
        public List<DnsQuestion> Questions { get; set; }

        /// <summary>
        /// Gets or Sets Answers
        /// </summary>

        [DataMember(Name="answers")]
        public List<DnsResourceRecord> Answers { get; set; }

        /// <summary>
        /// Gets or Sets Authorities
        /// </summary>

        [DataMember(Name="authorities")]
        public List<DnsResourceRecord> Authorities { get; set; }

        /// <summary>
        /// Gets or Sets Additional
        /// </summary>

        [DataMember(Name="additional")]
        public List<DnsResourceRecord> Additional { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DnsDTO {\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  ReplyCode: ").Append(ReplyCode).Append("\n");
            sb.Append("  TransactionId: ").Append(TransactionId).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Questions: ").Append(Questions).Append("\n");
            sb.Append("  Answers: ").Append(Answers).Append("\n");
            sb.Append("  Authorities: ").Append(Authorities).Append("\n");
            sb.Append("  Additional: ").Append(Additional).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DnsDTO)obj);
        }

        /// <summary>
        /// Returns true if DnsDTO instances are equal
        /// </summary>
        /// <param name="other">Instance of DnsDTO to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DnsDTO other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    SessionId == other.SessionId ||
                    SessionId != null &&
                    SessionId.Equals(other.SessionId)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Flags == other.Flags ||
                    Flags != null &&
                    Flags.Equals(other.Flags)
                ) && 
                (
                    ReplyCode == other.ReplyCode ||
                    ReplyCode != null &&
                    ReplyCode.Equals(other.ReplyCode)
                ) && 
                (
                    TransactionId == other.TransactionId ||
                    TransactionId != null &&
                    TransactionId.Equals(other.TransactionId)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    Questions == other.Questions ||
                    Questions != null &&
                    Questions.SequenceEqual(other.Questions)
                ) && 
                (
                    Answers == other.Answers ||
                    Answers != null &&
                    Answers.SequenceEqual(other.Answers)
                ) && 
                (
                    Authorities == other.Authorities ||
                    Authorities != null &&
                    Authorities.SequenceEqual(other.Authorities)
                ) && 
                (
                    Additional == other.Additional ||
                    Additional != null &&
                    Additional.SequenceEqual(other.Additional)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (SessionId != null)
                    hashCode = hashCode * 59 + SessionId.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Flags != null)
                    hashCode = hashCode * 59 + Flags.GetHashCode();
                    if (ReplyCode != null)
                    hashCode = hashCode * 59 + ReplyCode.GetHashCode();
                    if (TransactionId != null)
                    hashCode = hashCode * 59 + TransactionId.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (Questions != null)
                    hashCode = hashCode * 59 + Questions.GetHashCode();
                    if (Answers != null)
                    hashCode = hashCode * 59 + Answers.GetHashCode();
                    if (Authorities != null)
                    hashCode = hashCode * 59 + Authorities.GetHashCode();
                    if (Additional != null)
                    hashCode = hashCode * 59 + Additional.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DnsDTO left, DnsDTO right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DnsDTO left, DnsDTO right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
