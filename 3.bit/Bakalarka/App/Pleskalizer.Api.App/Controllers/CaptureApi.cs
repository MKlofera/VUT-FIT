/*
 * REST API Decoder
 *
 * REST API Versions
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Pleskalizer.Api.DAL.Seeds;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CaptureApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="caseId"></param>
        /// <param name="captureId"></param>
        /// <param name="from"></param>
        /// <param name="to"></param>
        /// <response code="200">Success</response>
        /// <response code="0">  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | </response>
        [HttpGet]
        [Route("/api/v1/{caseId}/Capture/{captureId}/Aggregate")]
        
        [SwaggerOperation("CaptureAggregate")]
        [SwaggerResponse(statusCode: 200, type: typeof(CaptureConversationStatisticsDetailDTO), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDTO), description: "  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | ")]
        public virtual IActionResult CaptureAggregate([FromRoute][Required]Guid? caseId, [FromRoute][Required]Guid? captureId, [FromQuery]DateTime? from, [FromQuery]DateTime? to)
        { 
            var detailModelOriginal = CaptureSeeds.CaptureDetailSeedsList.FirstOrDefault(x => x.CaptureId == captureId);
            
            //Deep copy
            var serializedDetailModel = Newtonsoft.Json.JsonConvert.SerializeObject(detailModelOriginal);
            var detailModel = Newtonsoft.Json.JsonConvert.DeserializeObject<CaptureConversationStatisticsDetailDTO>(serializedDetailModel);
            var addressATimestamp = getTimestamp(from ?? DateTime.Now);
            var addressBTimestamp = getTimestamp(to ?? DateTime.Now);
            
            detailModel!.FlowStatisticsSnapshots = detailModel.FlowStatisticsSnapshots
                .Where(x => 
                    x.FirstSeenTimestampTicks >= addressATimestamp && 
                    x.LastSeenTimestampTicks <= addressBTimestamp)
                .ToList();
            
            double getTimestamp(DateTime date)
            {
                var baseDate = new DateTime (1970, 01, 01);
                return date.Subtract (baseDate).TotalSeconds;
            }

            return StatusCode(200, detailModel);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve page of items. To retrieve the next page, pass the retrieved paging state from the previous API call to the next. NULL paging state denotes the last page.</remarks>
        /// <param name="caseId"></param>
        /// <param name="pagingState"></param>
        /// <param name="pageSize"></param>
        /// <response code="200">Success</response>
        /// <response code="0">  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | </response>
        [HttpGet]
        [Route("/api/v1/{caseId}/Capture")]
        
        [SwaggerOperation("CaptureGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(CaptureConversationStatisticsListDTOPageQueryResultDTO), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDTO), description: "  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | ")]
        public virtual IActionResult CaptureGet([FromRoute][Required]Guid? caseId, [FromQuery]byte[] pagingState, [FromQuery]int? pageSize)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(CaptureConversationStatisticsListDTOPageQueryResultDTO));

            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorDTO));
            string exampleJson = null;
            exampleJson = "{\n  \"pagingState\" : \"\",\n  \"items\" : [ {\n    \"captureId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"uri\" : \"uri\"\n  }, {\n    \"captureId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n    \"uri\" : \"uri\"\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<CaptureConversationStatisticsListDTOPageQueryResultDTO>(exampleJson)
                        : default(CaptureConversationStatisticsListDTOPageQueryResultDTO);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="caseId"></param>
        /// <param name="captureId"></param>
        /// <response code="200">Success</response>
        /// <response code="0">  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | </response>
        [HttpGet]
        [Route("/api/v1/{caseId}/Capture/{captureId}")]
        
        [SwaggerOperation("CaptureGet_0")]
        [SwaggerResponse(statusCode: 200, type: typeof(CaptureConversationStatisticsDetailDTO), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDTO), description: "  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | ")]
        public virtual IActionResult CaptureGet_0([FromRoute][Required]Guid? caseId, [FromRoute][Required]Guid? captureId)
        {
            return StatusCode(200, CaptureSeeds.CaptureDetailSeedsList.Find(x => x.CaptureId == captureId));
        }
    }
}
