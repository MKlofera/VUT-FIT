/*
 * REST API Decoder
 *
 * REST API Versions
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Pleskalizer.Api.DAL.Seeds;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SmtpApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve page of items. To retrieve the next page, pass the retrieved paging state from the previous API call to the next. NULL paging state denotes the last page.</remarks>
        /// <param name="caseId"></param>
        /// <param name="pagingState"></param>
        /// <param name="pageSize"></param>
        /// <response code="200">Success</response>
        /// <response code="0">  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | </response>
        [HttpGet]
        [Route("/api/v1/{caseId}/Smtp/ClientMessage")]
        
        [SwaggerOperation("SmtpGetClientMessage")]
        [SwaggerResponse(statusCode: 200, type: typeof(SmtpClientMessageDTOPageQueryResultDTO), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDTO), description: "  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | ")]
        public virtual IActionResult SmtpGetClientMessage([FromRoute][Required]Guid? caseId, [FromQuery]byte[] pagingState, [FromQuery]int? pageSize)
        {
            int pageState = ByteArrToInt(pagingState);
            int _pageSize = pageSize ?? 10;
            var messages = SmtpClientSeeds.SmtpClientMessageListSeed.Items.Skip(pageState * _pageSize).Take(_pageSize).ToList();
            var data = new SmtpClientMessageDTOPageQueryResultDTO();
            data.Items = messages;
            return StatusCode(200, data);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve page of items. To retrieve the next page, pass the retrieved paging state from the previous API call to the next. NULL paging state denotes the last page.</remarks>
        /// <param name="caseId"></param>
        /// <param name="sessionId"></param>
        /// <param name="pagingState"></param>
        /// <param name="pageSize"></param>
        /// <response code="200">Success</response>
        /// <response code="0">  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | </response>
        [HttpGet]
        [Route("/api/v1/{caseId}/Smtp/ClientMessage/{sessionId}")]
        
        [SwaggerOperation("SmtpGetClientMessage_0")]
        [SwaggerResponse(statusCode: 200, type: typeof(SmtpClientMessageDTOPageQueryResultDTO), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDTO), description: "  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | ")]
        public virtual IActionResult SmtpGetClientMessage_0([FromRoute][Required]Guid? caseId, [FromRoute][Required]Guid? sessionId, [FromQuery]byte[] pagingState, [FromQuery]int? pageSize)
        { 
            SmtpClientMessageDTOPageQueryResultDTO smtpClient = new();
            foreach (var item in SmtpClientSeeds.SmtpClientMessageListSeed.Items)
            {
                if (item.SessionId == sessionId)
                {
                    smtpClient.Items.Add(item);
                }
            }
            int pageState = ByteArrToInt(pagingState);
            int _pageSize = pageSize ?? 10;
            var messages = smtpClient.Items
                .Skip(pageState * _pageSize)
                .Take(_pageSize)
                .ToList();
            smtpClient.Items = messages;
            return StatusCode(200, smtpClient);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve page of items. To retrieve the next page, pass the retrieved paging state from the previous API call to the next. NULL paging state denotes the last page.</remarks>
        /// <param name="caseId"></param>
        /// <param name="pagingState"></param>
        /// <param name="pageSize"></param>
        /// <response code="200">Success</response>
        /// <response code="0">  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | </response>
        [HttpGet]
        [Route("/api/v1/{caseId}/Smtp/ServerMessage")]
        
        [SwaggerOperation("SmtpGetServerMessage")]
        [SwaggerResponse(statusCode: 200, type: typeof(SmtpServerMessageDTOPageQueryResultDTO), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDTO), description: "  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | ")]
        public virtual IActionResult SmtpGetServerMessage([FromRoute][Required]Guid? caseId, [FromQuery]byte[] pagingState, [FromQuery]int? pageSize)
        { 
            int pageState = ByteArrToInt(pagingState);
            int _pageSize = pageSize ?? 10;
            var messages = SmtpServerSeeds.SmtpServerMessageListSeed.Items.Skip(pageState * _pageSize).Take(_pageSize).ToList();
            var data = new SmtpServerMessageDTOPageQueryResultDTO();
            data.Items = messages;
            return StatusCode(200, data);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>Retrieve page of items. To retrieve the next page, pass the retrieved paging state from the previous API call to the next. NULL paging state denotes the last page.</remarks>
        /// <param name="caseId"></param>
        /// <param name="sessionId"></param>
        /// <param name="pagingState"></param>
        /// <param name="pageSize"></param>
        /// <response code="200">Success</response>
        /// <response code="0">  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | </response>
        [HttpGet]
        [Route("/api/v1/{caseId}/Smtp/ServerMessage/{sessionId}")]
        
        [SwaggerOperation("SmtpGetServerMessage_0")]
        [SwaggerResponse(statusCode: 200, type: typeof(SmtpServerMessageDTOPageQueryResultDTO), description: "Success")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorDTO), description: "  | HTTP status code | Description | | - -- -- -- -- -- -- -- - | - -- -- -- -- -- | | **401** | Unauthorized | | **404** | Not found | ")]
        public virtual IActionResult SmtpGetServerMessage_0([FromRoute][Required]Guid? caseId, [FromRoute][Required]Guid? sessionId, [FromQuery]byte[] pagingState, [FromQuery]int? pageSize)
        { 
            SmtpServerMessageDTOPageQueryResultDTO smtpServer = new();
            foreach (var item in SmtpServerSeeds.SmtpServerMessageListSeed.Items)
            {
                if (item.SessionId == sessionId)
                {
                    smtpServer.Items.Add(item);
                }
            }
            int pageState = ByteArrToInt(pagingState);
            int _pageSize = pageSize ?? 10;
            var messages = smtpServer.Items
                .Skip(pageState * _pageSize)
                .Take(_pageSize)
                .ToList();
            smtpServer.Items = messages;
            return StatusCode(200, smtpServer);
        }
        
        private int ByteArrToInt(byte[] byteArr)
        {
            return (Int32)(BitConverter.ToInt16(byteArr, 0));
        }
    }
}
