// <auto-generated />
using System;
using FoodDelivery.Api.DAL.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodDelivery.Api.DAL.EF.Migrations
{
    [DbContext(typeof(FoodDeliveryDbContext))]
    [Migration("20220928150553_Seeds")]
    partial class Seeds
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("FoodDelivery.Api.DAL.Common.Entities.FoodEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Allergens")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Foods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11cf3324-14b1-4c5e-8547-b5d0319ad2f1"),
                            Allergens = "Eggs,Milk,Peanuts",
                            Description = "Spaghetti with meatballs, just like mom used to make.",
                            Name = "Spaghetti With Balls",
                            Photo = "https://www.gannett-cdn.com/presto/2021/10/01/PDTN/6ecbea6f-940c-419c-9981-fe1eff36d7ae-moms_spaghetti_review_2.jpg",
                            Price = 12.9,
                            RestaurantId = new Guid("4f27d553-adbe-4daf-9c12-9d9ee4c3fd2d")
                        },
                        new
                        {
                            Id = new Guid("ef6f07bb-63c0-4260-8264-447c97e4e2ca"),
                            Allergens = "Gluten,Crustaceans,Fish",
                            Description = "Bolognese Spaghetti, just like mom used to make.",
                            Name = "Bolognese Spaghetti",
                            Photo = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRWfBr1XVoKa0ItKifkeIPLM_QtSKopCQitFA&usqp=CAU",
                            Price = 8.9000000000000004,
                            RestaurantId = new Guid("4f27d553-adbe-4daf-9c12-9d9ee4c3fd2d")
                        },
                        new
                        {
                            Id = new Guid("0315248e-7dc9-4a06-9702-e01002eb25ec"),
                            Allergens = "Eggs,Milk,Peanuts",
                            Description = "tomato sauce, mozzarella",
                            Name = "Margherita",
                            Photo = "https://carusopizza.cz/630-home_default/margherita.jpg",
                            Price = 21.899999999999999,
                            RestaurantId = new Guid("ee3205ef-f3f3-4693-a74f-6e62a95587db")
                        },
                        new
                        {
                            Id = new Guid("9e1b5d5b-d581-475b-9b7e-527cb16b9abf"),
                            Allergens = "Sulphur,Lupin",
                            Description = "tomato sauce, mozzarella, ham, bacon, pepper salami",
                            Name = "Golosona",
                            Photo = "https://carusopizza.cz/637-home_default/golosona.jpg",
                            Price = 22.899999999999999,
                            RestaurantId = new Guid("ee3205ef-f3f3-4693-a74f-6e62a95587db")
                        },
                        new
                        {
                            Id = new Guid("8e1b5d5b-d581-475b-9b7e-527cb16b9abf"),
                            Allergens = "Sulphur,Lupin",
                            Description = "cream, mozzarella, gorgonzola, camembert,  smoked cheese",
                            Name = "quattro formaggi",
                            Photo = "https://carusopizza.cz/635-large_default/4-formaggi.jpg",
                            Price = 28.899999999999999,
                            RestaurantId = new Guid("ee3205ef-f3f3-4693-a74f-6e62a95587db")
                        },
                        new
                        {
                            Id = new Guid("c6c88ffc-249e-4b56-a26e-4f6f674fddad"),
                            Allergens = "Soybeans,Molluscs,Fish,Nuts,Celery",
                            Description = "tomato sauce, mozzarella, ham, bacon, pepper salami",
                            Name = "MAKI",
                            Photo = "https://www.hatsurestaurant.cz/wp-content/uploads/2022/05/maki-min-1-1024x726.jpeg",
                            Price = 37.899999999999999,
                            RestaurantId = new Guid("dec40972-ec8b-432e-8b66-d8577b45b2fc")
                        },
                        new
                        {
                            Id = new Guid("cfdbb65e-eaff-4be3-b42b-18724ef8c938"),
                            Allergens = "Sesame,Nuts,Celery,Molluscs",
                            Description = "Technically, sashimi is not a type of sushi because it does not contain any rice. ",
                            Name = "SASHIMI",
                            Photo = "https://www.hatsurestaurant.cz/wp-content/uploads/2022/05/maki-min-1-1024x726.jpeg",
                            Price = 48.899999999999999,
                            RestaurantId = new Guid("dec40972-ec8b-432e-8b66-d8577b45b2fc")
                        },
                        new
                        {
                            Id = new Guid("1ce5ac47-9247-4e4f-b51a-dadba6df5ad6"),
                            Allergens = "",
                            Description = "according to our daily offer",
                            Name = "Wagyu",
                            Photo = "https://pavillonsteakhouse.cz/wp-content/uploads/2022/03/Pavillon-08.jpg",
                            Price = 298.89999999999998,
                            RestaurantId = new Guid("a03f7047-9c07-4be9-841f-319054699811")
                        },
                        new
                        {
                            Id = new Guid("997e6b62-9e2a-4e80-ae84-67094ed58a14"),
                            Allergens = "Molluscs,Milk,Lupin,Sulphur,Mustard",
                            Description = "the most tender cut of meat from the carcass. the meat stays exceptionally tender.",
                            Name = "TunaSteak",
                            Photo = "https://pavillonsteakhouse.cz/wp-content/uploads/2020/12/Pavilon-002.jpg",
                            Price = 98.900000000000006,
                            RestaurantId = new Guid("a03f7047-9c07-4be9-841f-319054699811")
                        },
                        new
                        {
                            Id = new Guid("65712099-0f16-46e8-a747-ddd07255c6ad"),
                            Allergens = "Eggs,Milk",
                            Description = "tomato sauce, mozzarella, ham, mushrooms",
                            Name = "Prosciutto Funghi",
                            Photo = "https://carusopizza.cz/670-large_default/prosciutto-funghi.jpg",
                            Price = 298.89999999999998,
                            RestaurantId = new Guid("274d6393-6e49-4fcd-a2d0-ca79be190ef5")
                        },
                        new
                        {
                            Id = new Guid("8c7c72ea-03b6-4754-9924-f311db160aea"),
                            Allergens = "Eggs,Milk,Peanuts,Crustaceans",
                            Description = "tomato sauce, mozzarella, italian salami napoli, italian salami spianata",
                            Name = "Salami",
                            Photo = "https://carusopizza.cz/641-home_default/salami.jpg",
                            Price = 22.899999999999999,
                            RestaurantId = new Guid("274d6393-6e49-4fcd-a2d0-ca79be190ef5")
                        });
                });

            modelBuilder.Entity("FoodDelivery.Api.DAL.Common.Entities.FoodOrderNoteEntity", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FoodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FoodId");

                    b.HasIndex("OrderId");

                    b.ToTable("FoodOrderNotes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b03b189f-f4f0-49bd-bb0b-7f56d4548b68"),
                            FoodId = new Guid("65712099-0f16-46e8-a747-ddd07255c6ad"),
                            Note = "No ham please, extra corn",
                            OrderId = new Guid("39ec26de-182e-4678-8c24-7c448be05a36")
                        },
                        new
                        {
                            Id = new Guid("0751cbb9-f7f5-4e56-a0c0-c19b5ee3e450"),
                            FoodId = new Guid("9e1b5d5b-d581-475b-9b7e-527cb16b9abf"),
                            Note = "No onions please",
                            OrderId = new Guid("39ec26de-182e-4678-8c24-7c448be05a36")
                        },
                        new
                        {
                            Id = new Guid("0f2c0750-4de7-4944-8581-8f038726203e"),
                            FoodId = new Guid("8e1b5d5b-d581-475b-9b7e-527cb16b9abf"),
                            Note = "No cheese please",
                            OrderId = new Guid("39ec26de-182e-4678-8c24-7c448be05a36")
                        },
                        new
                        {
                            Id = new Guid("58cb9ade-2ee2-428b-b208-100fc981d29c"),
                            FoodId = new Guid("8e1b5d5b-d581-475b-9b7e-527cb16b9abf"),
                            Note = "",
                            OrderId = new Guid("7573e0e4-7da0-4aa9-860b-395610bd0eab")
                        },
                        new
                        {
                            Id = new Guid("6ccac066-8ea4-4be3-a9ea-2301d6df84a6"),
                            FoodId = new Guid("8e1b5d5b-d581-475b-9b7e-527cb16b9abf"),
                            Note = "Double Cheese",
                            OrderId = new Guid("7573e0e4-7da0-4aa9-860b-395610bd0eab")
                        });
                });

            modelBuilder.Entity("FoodDelivery.Api.DAL.Common.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DeliveryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderState")
                        .HasColumnType("int");

                    b.Property<Guid>("RestaurantId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RestaurantId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("39ec26de-182e-4678-8c24-7c448be05a36"),
                            Address = "1234 Main st. China town",
                            DeliveryTime = new DateTime(2022, 9, 28, 17, 5, 52, 988, DateTimeKind.Local).AddTicks(2141),
                            Description = "ASAP please, I'm hungry",
                            Name = "Marek Klofera",
                            OrderState = 1,
                            RestaurantId = new Guid("ee3205ef-f3f3-4693-a74f-6e62a95587db")
                        },
                        new
                        {
                            Id = new Guid("7573e0e4-7da0-4aa9-860b-395610bd0eab"),
                            Address = "1234 Main st. Metrix",
                            DeliveryTime = new DateTime(2022, 9, 28, 17, 5, 52, 992, DateTimeKind.Local).AddTicks(2532),
                            Description = "Metrix is cool",
                            Name = "Mr. Anderson",
                            OrderState = 2,
                            RestaurantId = new Guid("ee3205ef-f3f3-4693-a74f-6e62a95587db")
                        });
                });

            modelBuilder.Entity("FoodDelivery.Api.DAL.Common.Entities.RestaurantEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Restaurants");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4f27d553-adbe-4daf-9c12-9d9ee4c3fd2d"),
                            Address = "1234 Main St, Anytown, USA",
                            Description = "Eminem's restaurant Mom's Spaghetti to get Super Bowl pop-up Today.",
                            Latitude = -6.9857230000000001,
                            Longitude = 139.345,
                            Name = "Mom's spaghetti"
                        },
                        new
                        {
                            Id = new Guid("274d6393-6e49-4fcd-a2d0-ca79be190ef5"),
                            Address = "Údolní 4 Brno-město",
                            Description = "OCHUTNEJTE PRAVOU ITALSKOU KUCHYNI",
                            Latitude = 12.32123,
                            Longitude = 41.112341999999998,
                            Name = "Pizzerie La Famiglia Brno"
                        },
                        new
                        {
                            Id = new Guid("dec40972-ec8b-432e-8b66-d8577b45b2fc"),
                            Address = "Neo's street 14",
                            Description = "Sushi, které se rozplývá na jazyku",
                            Latitude = 46.357230000000001,
                            Longitude = 12.345420000000001,
                            Name = "Koishi fish & sushi Restaurant"
                        },
                        new
                        {
                            Id = new Guid("a03f7047-9c07-4be9-841f-319054699811"),
                            Address = "Jackson street",
                            Description = "THE TRADITIONAL BRITISH KITCHEN",
                            Latitude = -56.514123400000003,
                            Longitude = 111.34542,
                            Name = "Borgo Agnese"
                        },
                        new
                        {
                            Id = new Guid("ee3205ef-f3f3-4693-a74f-6e62a95587db"),
                            Address = "Butcher street 4",
                            Description = "Itallian pizza and burgers",
                            Latitude = 16.223310000000001,
                            Longitude = 89.231399999999994,
                            Name = "Amici Pizza & Burgers"
                        });
                });

            modelBuilder.Entity("FoodDelivery.Api.DAL.Common.Entities.FoodEntity", b =>
                {
                    b.HasOne("FoodDelivery.Api.DAL.Common.Entities.RestaurantEntity", "Restaurant")
                        .WithMany("Foods")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Api.DAL.Common.Entities.FoodOrderNoteEntity", b =>
                {
                    b.HasOne("FoodDelivery.Api.DAL.Common.Entities.FoodEntity", "Food")
                        .WithMany()
                        .HasForeignKey("FoodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FoodDelivery.Api.DAL.Common.Entities.OrderEntity", "Order")
                        .WithMany("FoodOrderNotes")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Food");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("FoodDelivery.Api.DAL.Common.Entities.OrderEntity", b =>
                {
                    b.HasOne("FoodDelivery.Api.DAL.Common.Entities.RestaurantEntity", "Restaurant")
                        .WithMany("Orders")
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Restaurant");
                });

            modelBuilder.Entity("FoodDelivery.Api.DAL.Common.Entities.OrderEntity", b =>
                {
                    b.Navigation("FoodOrderNotes");
                });

            modelBuilder.Entity("FoodDelivery.Api.DAL.Common.Entities.RestaurantEntity", b =>
                {
                    b.Navigation("Foods");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
